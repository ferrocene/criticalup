# SPDX-FileCopyrightText: The Ferrocene Developers
# SPDX-License-Identifier: MIT OR Apache-2.0

---

name: Package

on:
  workflow_call:
    inputs:
      glibc:
        type: string
        description: (Linux only) The glibc version to use
    outputs:
      run-id:
        description: The id of the workflow run
        value: ${{ github.run_id }}
      msi-id:
        description: The artifact msi id
        value: ${{ jobs.msi.outputs.msi-id }}

defaults:
  run:
    shell: bash

jobs:
  msi:
    runs-on: windows-latest
    outputs:
      msi-id: ${{ steps.msi.outputs.artifact-id }}
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/use-ferrocene/
        with:
          token: ${{ secrets.CRITICALUP_TOKEN }}
          uninstall-rust: true  

      - name: Install WiX
        run: |
          mkdir -p ~/msi
          cd ~/msi
          curl -L -o wix.zip https://github.com/wixtoolset/wix3/releases/download/wix3141rtm/wix314-binaries.zip
          unzip wix.zip

      - name: Install cargo-binstall
        run: curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash

      - name: Install cargo-wix
        run: cargo binstall cargo-wix

      - name: Run cargo-wix
        run: cargo wix --package criticalup --bin-path ~/msi --nocapture --output ${GITHUB_WORKSPACE}/criticalup-x86_64-pc-windows-msvc.msi

      - name: Sign Artifact with CodeSignTool
        uses: sslcom/esigner-codesign@develop
        with:
          # CodeSignTool Commands:
          # - get_credential_ids: Output the list of eSigner credential IDs associated with a particular user.
          # - credential_info: Output key and certificate information related to a credential ID.
          # - sign: Sign and timestamp code object.
          # - batch_sign: Sign and timestamp multiple code objects with one OTP.
          # - hash: Pre-compute hash(es) for later use with batch_hash_sign command.
          # - batch_sign_hash: Sign hash(es) pre-computed with hash command.
          command: sign
          username: ${{secrets.SSLDOTCOM_USERNAME}}
          password: ${{secrets.SSLDOTCOM_PASSWORD}}
          # Credential ID for signing certificate.
          credential_id: ${{secrets.SSLDOTCOM_CREDENTIAL_ID}}
          # OAuth TOTP Secret (https://www.ssl.com/how-to/automate-esigner-ev-code-signing)
          totp_secret: ${{secrets.SSLDOTCOM_TOTP_SECRET}}
          # Path of code object to be signed.
          # Supported File Types: acm, ax, bin, cab, cpl, dll, drv, efi, exe, mui, ocx, scr, sys, tsp, msi, ps1, ps1xml, js, vbs, wsf, jar
          file_path: ${GITHUB_WORKSPACE}/criticalup-x86_64-pc-windows-msvc.msi
          override: true
          # This variable are optional, and specify the environment name. If omitted, the environment name will be set to PROD and use production code_sign_tool.properties file. For signing artifact with demo account, the environment name will be set to TEST.
          environment_name: PROD

      - name: Upload msi
        id: msi
        uses: actions/upload-artifact@v4
        with:
          name: criticalup-x86_64-pc-windows-msvc.msi
          path: criticalup-x86_64-pc-windows-msvc.msi
          retention-days: 7
