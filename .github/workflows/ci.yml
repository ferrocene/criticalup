# SPDX-FileCopyrightText: The Ferrocene Developers
# SPDX-License-Identifier: MIT OR Apache-2.0

---

name: CI
on:
  push:
    branches: [staging, trying]

permissions:
  # Allow write access to the source code to enable GitHub Pages publishing.
  contents: read

jobs:
  build:
    strategy:
      matrix:
        include:
          - runner: macos-latest
            target: aarch64-apple-darwin
          - runner: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
            glibc: "2.32"
          - runner: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
            glibc: "2.32"
          - runner: windows-latest
            target: x86_64-pc-windows-msvc
    uses: ./.github/workflows/build.yml
    secrets: inherit
    with:
      runner: ${{ matrix.runner }}
      target: ${{ matrix.target }}
      glibc: ${{ matrix.glibc }}
      release: false

  integration-test:
    name: Test CriticalUp on GHA Runners
    needs: [build]
    environment: testing
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: macos-latest
            target: aarch64-apple-darwin
          - runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - runner: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
          - runner: windows-latest
            target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.runner }}
    env:
      CRITICALUP_TOKEN: ${{ secrets.CRITICALUP_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - name: "Define toolchain"
        shell: bash # Powershell does not do heredocs
        run: |
          mkdir -p crab-boil
          cd crab-boil
          cat <<- EOF > criticalup.toml
            manifest-version = 1

            [products.ferrocene]
            release = "stable-24.11.0"
            packages = [
                "cargo-\${rustc-host}",
                "rustc-\${rustc-host}",
                "rust-std-\${rustc-host}",
            ]
          EOF

      - uses: actions/download-artifact@v4
        with:
          name: criticalup-${{ matrix.target }}.${{ runner.os == 'Windows' && 'zip' || 'tar.xz' }}
          path: crab-boil

      - name: Unpack archive
        if: ${{ runner.os == 'Windows' }}
        working-directory: crab-boil
        run: |
          powershell -c "Expand-Archive criticalup-${{ matrix.target }}.zip"
          mv criticalup-${{ matrix.target }}/criticalup.exe criticalup.exe

      - name: Unpack archive and make executable
        if: ${{ runner.os != 'Windows' }}
        working-directory: crab-boil
        run: |
          tar xvf criticalup-${{ matrix.target }}.tar.xz
          mv criticalup-${{ matrix.target }}/criticalup criticalup
          chmod +x ./criticalup

      - name: Auth Criticalup
        working-directory: crab-boil
        run: ./criticalup auth set $CRITICALUP_TOKEN


      - name: Install toolchain
        working-directory: crab-boil
        run: |
          ./criticalup install

      - name: Create toolchain link
        working-directory: crab-boil
        run: |
          ./criticalup link create

      - name: Run `criticalup run` test workflow
        working-directory: crab-boil
        run: |
          ./criticalup run -- cargo init
          ./criticalup run -- cargo build
          ./criticalup run -- cargo run
          ./criticalup which rustc

      # Windows allows the `.exe` or not, at the users option.
      - name: Run Windows exclusive commands
        if: ${{ runner.os == 'Windows' }}
        working-directory: crab-boil
        run: |
            ./criticalup.exe run -- cargo --version
            ./criticalup run -- cargo.exe --version
            ./criticalup.exe run -- cargo.exe --version

      - name: Run `cargo +ferrocene` test workflow
        working-directory: crab-boil
        run: |
          cargo +ferrocene build
          cargo +ferrocene run

      - name: Remove toolchain link
        working-directory: crab-boil
        run: |
          ./criticalup link remove

      - name: Run test cleanup workflow
        working-directory: crab-boil
        run: |
          ./criticalup remove
          ./criticalup clean

  integration-test-file-server:
    name: local-file-server-integration
    environment: testing
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    env:
      CRITICALUP_DEV_TOKEN: ${{ secrets.CRITICALUP_DEV_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - name: "Define toolchain"
        shell: bash # Powershell does not do heredocs
        run: |
          mkdir -p crab-boil
          cd crab-boil
          cat <<- EOF > criticalup.toml
            manifest-version = 1

            [products.ferrocene]
            release = "stable-25.02.0"
            packages = [
                "cargo-\${rustc-host}",
                "rustc-\${rustc-host}",
                "rust-std-\${rustc-host}",
            ]
          EOF

      - name: Download release asset
        working-directory: crab-boil
        env:
          GH_TOKEN: ${{ secrets.AIR_GAPPED_TOKEN }}
        run: |
          # Get assets for the latest release
          gh release download -p criticalup-air-gapped-server  -R ferrocene/criticalup-air-gapped-server

      - name: make criticalup-dev binary
        working-directory: crab-boil
        run: |
          CARGO_TARGET_DIR=target cargo build --release -p criticalup-dev
          cp target/release/criticalup-dev ./criticalup-dev
          chmod +x ./criticalup-dev

      - name: Auth Criticalup
        working-directory: crab-boil
        run: ./criticalup-dev auth set $CRITICALUP_DEV_TOKEN

      - name: Install toolchain from dev server, in order to get the keys and artifacts
        working-directory: crab-boil
        run: |
          ./criticalup-dev install

      - name: Copy artifacts and keys.json to local server
        working-directory: crab-boil
        run: |
          mkdir -p ./artifacts/products/ferrocene/releases/stable-25.02.0
          cp  ~/.cache/criticalup-dev/artifacts/products/ferrocene/releases/stable-25.02.0/* ./artifacts/products/ferrocene/releases/stable-25.02.0/
          cp ~/.cache/criticalup-dev/keys.json ./

      - name: Run local server
        working-directory: crab-boil
        run: |
          chmod +x ./criticalup-air-gapped-server
          ./criticalup-air-gapped-server serve &

      - name: Remove toolchain and cache generated by using remote dev download server
        working-directory: crab-boil
        run: |
          ./criticalup-dev remove
          ./criticalup-dev clean


      - name: Install toolchain from local server
        working-directory: crab-boil
        run: |
          ./criticalup-dev install --download-server-url=http://localhost:3000

      - name: Run `criticalup-dev` with artifacts from local server in test workflow
        working-directory: crab-boil
        run: |
          ./criticalup-dev run -- cargo init
          ./criticalup-dev run -- cargo build
          ./criticalup-dev run -- cargo run
          ./criticalup-dev which rustc


  package:
    secrets: inherit
    uses: ./.github/workflows/package.yml
    with:
      sign: false

  license:
    name: Check licenses
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install REUSE
        run: pipx install reuse

      - name: Check compliance with REUSE
        run: reuse lint

  docs:
    uses: ./.github/workflows/docs.yml
    secrets: inherit

  build-finished:
    name: CI build successful
    runs-on: ubuntu-latest
    if: success()
    needs:
      - build
      - integration-test-file-server
      - integration-test
      - package
      - docs
      - license
    steps:
      - name: Mark the build as successful
        run: exit 0
